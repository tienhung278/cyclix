// <auto-generated />
using Cyclix.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cyclix.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("Cyclix.Entities.AnotherOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AnotherOptions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "another option 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "another option 2"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "brand 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "brand 2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "brand 3"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Ho Chi Minh",
                            Email = "abc@test.com",
                            FirstName = "Hung",
                            HouseNumber = "10",
                            LastName = "Pham",
                            PostCode = "700000",
                            Street = "Pham Hung",
                            Telephone = "1234567890"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "option 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "option 2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "option 3"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "option 4"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "option 5"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "option 6"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "package 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "package 2"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1L,
                            CustomerId = 1L,
                            Description = "Description",
                            Note = "Note",
                            ServiceId = 1L,
                            TypeId = 1L
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.RequestAnotherOption", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnotherOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestId", "AnotherOptionId");

                    b.HasIndex("AnotherOptionId");

                    b.ToTable("RequestAnotherOptions");

                    b.HasData(
                        new
                        {
                            RequestId = 1L,
                            AnotherOptionId = 1L
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.RequestOption", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("RequestOptions");

                    b.HasData(
                        new
                        {
                            RequestId = 1L,
                            OptionId = 1L
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.RequestPackage", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PackageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("RequestPackages");

                    b.HasData(
                        new
                        {
                            RequestId = 1L,
                            PackageId = 1L
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "service 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "service 2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "service 3"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Type", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "type 1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "type 2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "type 3"
                        });
                });

            modelBuilder.Entity("Cyclix.Entities.Request", b =>
                {
                    b.HasOne("Cyclix.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Cyclix.Entities.RequestAnotherOption", b =>
                {
                    b.HasOne("Cyclix.Entities.AnotherOption", "AnotherOption")
                        .WithMany("RequestAnotherOptions")
                        .HasForeignKey("AnotherOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Request", "Request")
                        .WithMany("RequestAnotherOptions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnotherOption");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Cyclix.Entities.RequestOption", b =>
                {
                    b.HasOne("Cyclix.Entities.Option", "Option")
                        .WithMany("RequestOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Request", "Request")
                        .WithMany("RequestOptions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Cyclix.Entities.RequestPackage", b =>
                {
                    b.HasOne("Cyclix.Entities.Package", "Package")
                        .WithMany("RequestPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyclix.Entities.Request", "Request")
                        .WithMany("RequestPackages")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Cyclix.Entities.AnotherOption", b =>
                {
                    b.Navigation("RequestAnotherOptions");
                });

            modelBuilder.Entity("Cyclix.Entities.Option", b =>
                {
                    b.Navigation("RequestOptions");
                });

            modelBuilder.Entity("Cyclix.Entities.Package", b =>
                {
                    b.Navigation("RequestPackages");
                });

            modelBuilder.Entity("Cyclix.Entities.Request", b =>
                {
                    b.Navigation("RequestAnotherOptions");

                    b.Navigation("RequestOptions");

                    b.Navigation("RequestPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
